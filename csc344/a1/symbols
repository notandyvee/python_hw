[hw1.c, int]
[hw1.c, main]
[hw1.c, const]
[hw1.c, ]
[hw1.c, char]
[hw1.c, toPrintOrNot[40];]
[hw1.c, =]
[hw1.c, fp;]
[hw1.c, char]
[hw1.c, int]
[hw1.c, key_counter]
[hw1.c, char]
[hw1.c, short]
[hw1.c, count]
[hw1.c, fp]
[hw1.c, "./keywords",]
[hw1.c, "r"]
[hw1.c, if]
[hw1.c, fp]
[hw1.c, printf]
[hw1.c, create]
[hw1.c, exit]
[hw1.c, ]
[hw1.c, ]
[hw1.c, fgetc]
[hw1.c, !=]
[hw1.c, ]
[hw1.c, ==]
[hw1.c, ]
[hw1.c, '\0';]
[hw1.c, =]
[hw1.c, ;]
[hw1.c, char]
[hw1.c, sizeof]
[hw1.c, ]
[hw1.c, ]
[hw1.c, keywords[key_counter],]
[hw1.c, temp,]
[hw1.c, +1]
[hw1.c, int]
[hw1.c, x]
[hw1.c, x]
[hw1.c, x++]
[hw1.c, =]
[hw1.c, =]
[hw1.c, else]
[hw1.c, =]
[hw1.c, ]
[hw1.c, ]
[hw1.c, ;]
[hw1.c, you]
[hw1.c, optional]
[hw1.c, be]
[hw1.c, Y]
[hw1.c, N]
[hw1.c, ;]
[hw1.c, 20,]
[hw1.c, stdin]
[hw1.c, int]
[hw1.c, strlen]
[hw1.c, toPrintOrNot[promptLength]
[hw1.c, =]
[hw1.c, toPrintOrNot[0]]
[hw1.c, ||]
[hw1.c, 'Y']
[hw1.c, =]
[hw1.c, f]
[hw1.c, "testFunction",]
[hw1.c, "r"]
[hw1.c, bool]
[hw1.c, false;]
[hw1.c, int]
[hw1.c, 0;]
[hw1.c, int]
[hw1.c, 0;]
[hw1.c, char]
[hw1.c, int]
[hw1.c, i,]
[hw1.c, j;]
[hw1.c, comma]
[hw1.c, int]
[hw1.c, 0;]
[hw1.c, =]
[hw1.c, fgets]
[hw1.c, line,]
[hw1.c, f]
[hw1.c, ]
[hw1.c, =]
[hw1.c, \t\n]
[hw1.c, ]
[hw1.c, ;]
[hw1.c, !=]
[hw1.c, ]
[hw1.c, ]
[hw1.c, int]
[hw1.c, length]
[hw1.c, token]
[hw1.c, int]
[hw1.c, death;]
[hw1.c, =]
[hw1.c, <]
[hw1.c, ]
[hw1.c, token[death]]
[hw1.c, ]
[hw1.c, =]
[hw1.c, ]
[hw1.c, ]
[hw1.c, ==]
[hw1.c, ]
[hw1.c, =]
[hw1.c, <]
[hw1.c, ]
[hw1.c, strcmp]
[hw1.c, token,]
[hw1.c, ==]
[hw1.c, ]
[hw1.c, true;]
[hw1.c, ]
[hw1.c, i]
[hw1.c, i]
[hw1.c, i++]
[hw1.c, if]
[hw1.c, iden_holder[i]]
[hw1.c, ]
[hw1.c, =]
[hw1.c, ]
[hw1.c, if]
[hw1.c, false]
[hw1.c, int]
[hw1.c, strlen]
[hw1.c, iden_holder[iden_holder_count]]
[hw1.c, char]
[hw1.c, ]
[hw1.c, char]
[hw1.c, len]
[hw1.c, ;]
[hw1.c, token,]
[hw1.c, len]
[hw1.c, ;]
[hw1.c, else]
[hw1.c, free]
[hw1.c, prob_cast]
[hw1.c, ]
[hw1.c, else]
[hw1.c, int]
[hw1.c, len2]
[hw1.c, token]
[hw1.c, char]
[hw1.c, strings[num_of_commas+1];]
[hw1.c, for]
[hw1.c, 0;]
[hw1.c, num_of_commas]
[hw1.c, h++]
[hw1.c, strings[h]]
[hw1.c, char]
[hw1.c, ]
[hw1.c, char]
[hw1.c, ;]
[hw1.c, int]
[hw1.c, 0;]
[hw1.c, =]
[hw1.c, int]
[hw1.c, abs]
[hw1.c, abs]
[hw1.c, abs++]
[hw1.c, if]
[hw1.c, ',']
[hw1.c, ]
[hw1.c, strings[strings_counter][character_index]]
[hw1.c, character_index++;]
[hw1.c, ]
[hw1.c, '\0';]
[hw1.c, =]
[hw1.c, ]
[hw1.c, strings[strings_counter][character_index]]
[hw1.c, character_index]
[hw1.c, strings_counter++;]
[hw1.c, int]
[hw1.c, l;]
[hw1.c, =]
[hw1.c, <]
[hw1.c, ]
[hw1.c, int]
[hw1.c, len]
[hw1.c, strings[l]]
[hw1.c, =]
[hw1.c, malloc]
[hw1.c, char]
[hw1.c, ]
[hw1.c, +1]
[hw1.c, strcpy]
[hw1.c, iden_holder[iden_holder_count],]
[hw1.c, ;]
[hw1.c, ]
[hw1.c, false;]
[hw1.c, key]
[hw1.c, ]
[hw1.c, i]
[hw1.c, i]
[hw1.c, i++]
[hw1.c, if]
[hw1.c, keywords[i]]
[hw1.c, ]
[hw1.c, int]
[hw1.c, strlen]
[hw1.c, keywords_holder[key_holder_count]]
[hw1.c, char]
[hw1.c, ]
[hw1.c, char]
[hw1.c, len]
[hw1.c, ;]
[hw1.c, token,]
[hw1.c, len]
[hw1.c, ;]
[hw1.c, =]
[hw1.c, ]
[hw1.c, token]
[hw1.c, NULL,]
[hw1.c, "]
[hw1.c, ]
[hw1.c, &]
[hw1.c, ]
[hw1.c, ]
[hw1.c, "]
[hw1.c, j]
[hw1.c, <]
[hw1.c, ]
[hw1.c, ==]
[hw1.c, 1]
[hw1.c, printf]
[hw1.c, "%s\n\n",]
[hw1.c, ;]
[hw1.c, ]
[hw1.c, ",]
[hw1.c, iden_holder[j]]
[hw1.c, ]
[hw1.c, print]
[hw1.c, ]
[hw1.c, int]
[hw1.c, x;]
[hw1.c, "]
[hw1.c, x]
[hw1.c, x]
[hw1.c, x++]
[hw1.c, if]
[hw1.c, key_holder_count]
[hw1.c, ]
[hw1.c, "%s\n\n",]
[hw1.c, keywords_holder[x]]
[hw1.c, ]
[hw1.c, printf]
[hw1.c, "%s,]
[hw1.c, keywords_holder[x]]
[hw1.c, ]
[hw1.c, ]
[hw1.c, ]
